import numpy as npimport pandas as pdimport matplotlib.pyplot as pltfrom pandas.plotting import lag_plotfrom pandas import datetimefrom statsmodels.tsa.arima_model import ARIMA, ARMAfrom statsmodels.tsa.statespace.sarimax import SARIMAXfrom sklearn.metrics import mean_squared_errorimport tensorflow.compat.v1 as tfimport tensorflow as tf # This code has been tested with TensorFlow 1.6from sklearn.preprocessing import MinMaxScalerfrom tensorflow.python.framework import opsfrom statsmodels.tsa.ar_model import AutoRegfrom sklearn.metrics import mean_squared_errorfrom sklearn.model_selection import train_test_splitfrom sklearn.ensemble import RandomForestClassifierfrom sklearn.tree import DecisionTreeClassifierimport statsmodels.api as smdf = pd.read_csv("Binance.csv")df_2 = pd.read_csv("Binance2.csv")df.head(5)df = df.sort_values(by='date',ascending=True)df1 = df.head(1000)ts = df1['close']ts_diff = ts - ts.shift(1)from statsmodels.tsa.seasonal import seasonal_decomposedecomposition = seasonal_decompose(ts, freq=4, model='additive')ts_decompose = ts_diffmod = SARIMAX(ts_decompose, trend='n', order=(1,1,0), seasonal_order=(3,0,3,4))resSARIMAX = mod.fit()pred = resSARIMAX.predict()MSE_error = mean_squared_error(ts_decompose, pred)print('Testing Mean Squared Error is {}'.format(MSE_error))import matplotlib.gridspec as gridspecplt.figure(figsize = (18,9))plt.plot(range(0, len(ts_decompose)), ts_decompose)plt.plot(range(700, len(ts_decompose)), pred[:300])plt.show()