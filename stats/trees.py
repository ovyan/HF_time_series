import numpy as npimport pandas as pdimport matplotlib.pyplot as pltfrom pandas.plotting import lag_plotfrom pandas import datetimefrom statsmodels.tsa.arima_model import ARIMA, ARMAfrom statsmodels.tsa.statespace.sarimax import SARIMAX#from sktime.forecasting.arima import AutoARIMAfrom sklearn.metrics import mean_squared_errorimport tensorflow.compat.v1 as tfimport tensorflow as tf # This code has been tested with TensorFlow 1.6from sklearn.preprocessing import MinMaxScalerfrom tensorflow.python.framework import opsfrom statsmodels.tsa.ar_model import AutoRegfrom sklearn.metrics import mean_squared_errorfrom sklearn.model_selection import train_test_splitfrom sklearn.ensemble import RandomForestClassifierfrom sklearn.tree import DecisionTreeClassifierimport statsmodels.api as smfrom sklearn.tree import DecisionTreeRegressorimport talib as tadf = pd.read_csv("Binance2.csv")df.head()df.drop(columns=['Volume BTC', 'Volume USDT', 'symbol'])df['EMA10'] = ta.EMA(df['close'].values, timeperiod=10)df['EMA30'] = ta.EMA(df['close'].values, timeperiod=30)df['ATR'] = ta.ATR(df['high'].values, df['low'].values, df['close'].values, timeperiod=14)df['ADX'] = ta.ADX(df['high'].values, df['low'].values, df['close'].values, timeperiod=14)df['RSI'] = ta.RSI(df['close'].values, timeperiod=14)macd, macdsignal, macdhist = ta.MACD(df['close'].values, fastperiod=12, slowperiod=26, signalperiod=9)df['MACD'] = macddf['MACDsignal'] = macdsignaldf.tail()import numpy as npdf['ClgtEMA10'] = np.where(df['close'] > df['EMA10'], 1, -1)df['EMA10gtEMA30'] = np.where(df['EMA10'] > df['EMA30'], 1, -1)df['MACDSIGgtMACD'] = np.where(df['MACDsignal'] > df['MACD'], 1, -1)df.tail()df['Return'] = df['close'].pct_change(1).shift(-1)df['target_cls'] = np.where(df.Return > 0, 1, 0)df['target_rgs'] = df['Return']df.tail()predictors_list = ['ATR', 'ADX','RSI', 'ClgtEMA10', 'EMA10gtEMA30', 'MACDSIGgtMACD']X = df[predictors_list]X.tail()y_cls = df.target_clsy_cls.tail()y_rgs = df.target_rgsy_rgs.tail()from sklearn.model_selection import train_test_splity=y_clsX_cls_train, X_cls_test, y_cls_train, y_cls_test = train_test_split(X, y, test_size=0.3, random_state=432, stratify=y)print (X_cls_train.shape, y_cls_train.shape)print (X_cls_test.shape, y_cls_test.shape)train_length = int(len(df)*0.70)X_rgs_train = X[:train_length]X_rgs_test = X[train_length:]y_rgs_train = y_rgs[:train_length]y_rgs_test = y_rgs[train_length:]print (X_rgs_train.shape, y_rgs_train.shape)print (X_rgs_test.shape, y_rgs_test.shape)from sklearn.tree import DecisionTreeClassifierclf = DecisionTreeClassifier(criterion='gini', max_depth=3, min_samples_leaf=6)clfX_cls_train=np.nan_to_num(X_cls_train)y_cls_train=np.nan_to_num(y_cls_train)clf = clf.fit(X_cls_train, y_cls_train)clffrom sklearn import treeimport graphvizdot_data = tree.export_graphviz(clf, out_file=None,filled=True,feature_names=predictors_list)graphviz.Source(dot_data)X_cls_test = np.nan_to_num(X_cls_test)y_cls_pred = clf.predict(X_cls_test)from sklearn.metrics import classification_reportreport = classification_report(y_cls_test, y_cls_pred)print(report)