import numpy as npimport pandas as pdimport matplotlib.pyplot as pltfrom pandas.plotting import lag_plotfrom pandas import datetimefrom statsmodels.tsa.arima_model import ARIMA, ARMAfrom statsmodels.tsa.statespace.sarimax import SARIMAX#from sktime.forecasting.arima import AutoARIMAfrom sklearn.metrics import mean_squared_errorimport tensorflow.compat.v1 as tfimport tensorflow as tf # This code has been tested with TensorFlow 1.6from sklearn.preprocessing import MinMaxScalerfrom tensorflow.python.framework import opsfrom statsmodels.tsa.ar_model import AutoRegfrom sklearn.metrics import mean_squared_errorfrom sklearn.model_selection import train_test_splitfrom sklearn.ensemble import RandomForestClassifierfrom sklearn.tree import DecisionTreeClassifierimport statsmodels.api as smdf = pd.read_csv("Binance.csv")df_2 = pd.read_csv("Binance2.csv")df.head(5)df = df.sort_values(by='date',ascending=True)df1 = df.head(1000)kek = df_2.head(1000)train_data, test_data = df1[0:int(len(df1)*0.7)], df1[int(len(df1)*0.7):]training_data = train_data['close'].valuestest_data = test_data['close'].valueshistory = [x for x in training_data]model_predictions = []N_test_observations = len(test_data)model = ARIMA(history, order=(4,0,4))model_fit = model.fit(disp=0)output = model_fit.forecast(steps=100)yhat = output[0]MSE_error = mean_squared_error(test_data[:100], yhat)print('Testing Mean Squared Error is {}'.format(MSE_error))test_data1 = test_data[-30:]plt.figure(figsize = (18,9))plt.plot(range(0, len(train_data)+len(yhat)), df1['close'].values[:len(train_data)+len(yhat)], color = 'tab:green', label = '')plt.plot(range(0, len(train_data)), training_data, color = 'tab:blue')plt.plot(range(len(train_data),len(train_data)+len(yhat)), yhat, color = 'tab:orange')#plt.plot(test_set_range, test_data, color = 'orange', label = 'True Value')#plt.xticks(range(0,df.shape[0],500),df['date'].loc[::10000],rotation=45)plt.xlabel('Date',fontsize=18)plt.show()plt.figure(figsize = (18,9))plt.plot(range(0,len(yhat)), yhat-test_data[:50], color = 'tab:orange')plt.xlabel('Date',fontsize=18)plt.ylabel('Mid Price',fontsize=18)plt.show()train_data, test_data = kek[0:int(len(kek)*0.7)], kek[int(len(kek)*0.7):]training_data = train_data['close'].valuestest_data = test_data['close'].valueshistory = [x for x in training_data]model_predictions = []N_test_observations = len(test_data)model = ARIMA(history, order=(3,1,0))model_fit = model.fit(disp=0)output = model_fit.forecast(steps=100)yhat = output[0]MSE_error = mean_squared_error(test_data[:100], yhat)print('Testing Mean Squared Error is {}'.format(MSE_error))test_data1 = test_data[-30:]plt.figure(figsize = (18,9))plt.plot(range(0, len(train_data)+len(yhat)), kek['close'].values[:len(train_data)+len(yhat)], color = 'tab:green', label = '')plt.plot(range(0, len(train_data)), training_data, color = 'tab:blue')plt.plot(range(len(train_data),len(train_data)+len(yhat)), yhat, color = 'tab:orange')#plt.plot(test_set_range, test_data, color = 'orange', label = 'True Value')#plt.xticks(range(0,df.shape[0],500),df['date'].loc[::10000],rotation=45)plt.xlabel('Date',fontsize=18)plt.ylabel('Mid Price',fontsize=18)plt.show()plt.figure(figsize = (18,9))plt.plot(range(0,len(yhat)), yhat-test_data[:100], color = 'tab:orange')plt.xlabel('Date',fontsize=18)plt.ylabel('Mid Price',fontsize=18)plt.show()ts = df1['close']ts_diff = ts - ts.shift(1)from statsmodels.tsa.seasonal import seasonal_decomposedecomposition = seasonal_decompose(ts, freq=4, model='additive')ts_decompose = np.nan_to_num(ts_decompose)model = ARIMA(ts_decompose, order=(3, 0, 1))res = model.fit(disp=-2)pred1 = res.predict()plt.figure(figsize = (18,9))plt.plot(range(0, len(ts_decompose)), ts_decompose)plt.plot(range(700, len(ts_decompose)), pred1[:300])plt.show()